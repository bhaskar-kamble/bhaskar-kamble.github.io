with installing matplotlib in python3.6 - do it as superuser.

instead of pip install xyz, do python3.6 -m install xyz

In the file requirements.txt, change the version of matplotlib that is there.

also had to do sudo pip install jupyter (dont know why no python36 -m etc)

-------

in the pelicanconf.py file, i replaced PLUGIN_PATH by PLUGIN_PATHS and './plugins' by ['./plugins']. In this way I was able to avoid the warnings:
WARNING: PLUGIN_PATH setting has been replaced by PLUGIN_PATHS, moving it to the new setting name.
WARNING: Defining PLUGIN_PATHS setting as string has been deprecated (should be a list)
when I ran
(blogve) kbhaskar@capri:~/Pythonblog$ pelican content -s publishconf.py


----------


Instead of git push I had to do
git push --set-upstream origin dev

-------

But

git push --set-upstream origin dev

was not working initially. I was getting message:

Permission denied (publickey). fatal: Could not read from remote repository

Then I had to do the whole thing with ssh key generation as given on githup help pages and got it finally figured out. In general these were the pages, in sequence, that helped me out:

https://help.github.com/articles/checking-for-existing-ssh-keys/
https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/
https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/

############################################################################

Wichtige Sachen, die ich gelernt habe.

1. Creating and activating a virtual environment (http://docs.python-guide.org/en/latest/dev/virtualenvs/).
2. Getting around with having different versions of python on my machine.
3. Valuable experience with pip. How to use pip for installing a package for python2.7 or python3.5 or python3.6. (python3.6 -m pip install matplotlib, for instance)
4. The PATH on your Linux machine is stored in the ~/.profile file. You can include a new PATH at the end.
5. I did ($ virtualenv -p /usr/bin/python3.6 blogve), where I have specified the version of Python as Python3.6.
6. I edited the requirements.txt file which was specified in the link https://www.dataquest.io/blog/how-to-setup-a-data-science-blog/. In that link, the requirements.txt file contained certain versions of packages such as pelican and matplotlib. I checked which versions of matplotlib and pelican I have using the command (pelican --version), and for matplotlib in the Python terminal with the command (matplotlib .__version__) . I reinstalled matplotlib and pelican for python3.6 (python3.6 -m pip install xyz, etc.) in a different terminal (not the local environment, rather in a new terminal).
7. I had to install matplotlib with pip for python3.6 as superuser.
8. I installed jupyter using (sudo pip install install jupyter) - wonder why i did not do (sudo python3.6 -m pip install jupyter).
9. The virtual environment I created was "blogve" using the command ($ virtualenv -p /usr/bin/python3.6 blogve) in the folder Pythonblog.
10. I dont remember if i installed virtualenv with pip or python3.6 -m pip.
11.I also had to install Jupyter plugin as the dataquest.io blog suggested. I had to download it from danielfrg's github konto and install it.
12. I have to launch jupyter notebook with the command ($jupyter notebook).
13. The command ($ pelican-quickstart) creates the folders "content" and "output".
14. The important parameters, folders, paths, options, etc are in the pelicanconf.py and publishconf.py files, which were also generated by pelican-quickstart.
15. I had to add some code at the end of the file pelicanconf.py to specify the MARKUP list, the PLUGIN_PATHS and PLUGINS. (Note that while dataquest.io has given PLUGIN_PATH, its usage is now deprecated and is to be replaced by PLUGIN_PATHS; and PLUGIN_PATHS should be a list instead ofa character.)
16. The command "pelican content" generates the html in the "output" folder.
17. In the output folder I ran (sudo python3.6 -m pelican.server). Dont know if sudo is necessary. Then did (git remote add origin git@github.com:bhaskar-kamble/bhaskar-kamble.github.io.git). Then strangely I ran (pelican content -s publishconf.py) - dont know from where or why I have this.
18. When sudo python3.6 -m pelican.server is running, I can go and check localhost:8000 to see my blog.
19. With github, I had to set the SSH key as explained on the git website. (see above)
20. git push --set-upstream origin dev
21. ghp-import output -b master
22. git push origin master

#################################
When you want to write a new article or modify an earlier article, do:
1. source blogve/bin/activate
2. Modify or create the posts in Jupyter Notebook.
3. Copy the ipynb file in "content" folder and modify the ipynb-meta file if needed.
4. Run pelican content -s publischconf.py
5. go to "output" folder
6. Run "python3.6 -m pelican.server" to see the post.
7. Go back to "Pythonblog"
8. Run "git checkout dev" or "git checkout -b dev". The latter if the branch "dev" doesn't already exist.

